BINARY SEARCH TRREE AND HOW TO FIND THE ELEMENTS

public class bst {
    int value;
    bst leftChild;
    bst rightChild;

    bst(int val) {
        this.value = val;
        this.leftChild = null;
        this.rightChild = null;
    }

    public static bst insert(int value, bst current) {
        if (current == null) {
            bst newNode = new bst(value);
            return newNode;
        } else {
            if (value < current.value)
                current.leftChild = insert(value, current.leftChild);
            else
                current.rightChild = insert(value, current.rightChild);
        }
        return current;
    }

    public static boolean search(int key, bst current) {
        if (current == null)
            return false;
        if (current.value == key)
            return true;
        else {
            if (key < current.value)
                return search(key, current.leftChild);
            else
                return search(key, current.rightChild);
        }
    }

    public static void preorder(bst current) {
        if (current == null)
            return;
        else {
            System.out.print(current.value + " ");
            preorder(current.leftChild);
            preorder(current.rightChild);
        }
    }

    public static void postorder(bst current) {
        if (current == null)
            return;
        else {
            postorder(current.leftChild);
            postorder(current.rightChild);
            System.out.print(current.value + " ");
        }
    }

    public static void inorder(bst current) {
        if (current == null)
            return;
        else {
            inorder(current.leftChild);
            System.out.print(current.value + " ");
            inorder(current.rightChild);
        }
    }

    public static void main(String args[]) {
        // constructing the tree
        bst root = new bst(12);
        root = insert(7, root);
        root = insert(20, root);
        root = insert(5, root);
        root = insert(9, root);
        root = insert(21, root);
        System.out.println(search(7, root));
        System.out.println(search(9, root));

        // Traversals
        System.out.println("\n\nAfter deletion");
        System.out.print("\nPreorder Traversal: ");
        preorder(root);
        System.out.print("\nPostorder Traversal: ");
        postorder(root);
        System.out.print("\nInorder Traversal: ");
        inorder(root);
        System.out.print("\nLevel Order Traversal: ");
        // levelOrder(root);
    }
}



//WHEN WE ARE CREATING THE IMSTAMCES THEN THAT IT IS DOING NOTHING BUT JUST CREATING THE STRUCTURE OVER THERE
class Node{
    int value;
    Node right;
    Node left;
    Node root;
    public Node(int value)
    {
        this.value = value;
        right = null;
        left = null;
    }
}
public class bstpractice {
    public Node root;
    public void insert(int value) {
        if (root == null) {
            root = new Node(value);
            return;
        }
        Node current = root;
        while (true) {
            if (value < current.value) {
                if (current.left == null) {
                    current.left = new Node(value);
                    break;
                } else {
                    current = current.left;
                }
            } else if (value > current.value) {
                if (current.right == null) {
                    current.right = new Node(value);
                    break;
                } else {
                    current = current.right;
                }
            } else {
                       return;
            }
        }
    }
    public int max(){
        Node maxele = root;
        while(maxele.right != null)
        {
            maxele = maxele.right;
        }
        return maxele.value;
    }
    public int min(){
        Node minele = root;
        while(minele.left != null)
        {
            minele = minele.left;
        }
        return minele.value;
    }
    public int getHeight(Node n){
        if(n==null){
            return 0;
        }
        int leftHeight = getHeight(n.left);
        int rigthHeight = getHeight(n.right);
        return Math.max(leftHeight,rigthHeight)+1;

    }
    public boolean isBalanced(Node n1){
        if(n1 == null)
        {
            return true;
        }
        else{
            int lheight = getHeight(n1.left);
            int rheight  = getHeight(n1.right);
            if(Math.abs(lheight - rheight) > 1)
            {
                return false;
            } 
        }
        return isBalanced(n1.left)&& isBalanced(n1.right);
    }
  public Node minValueNode(Node n1){
    Node current=n1;
    while(current.left!=null){
      current=current.left;
    }
    return current;
  }
public Node deleteNode(int key,Node root){
  if(root==null){
    return root;
  }
  else{
    if (key<root.value){
      root.left=deleteNode(key, root.left);
    }
    else if(key>root.value){
      root.right=deleteNode(key,root.right);
    }
    else{
      if(root.left==null){
        return root.light;
      }
      else if(root.right==null)
    
    }
  }
  
}

}
