
finding the values in the linked list:
travaersing from the head:


public void find(int value) {
        Node current = this.head;
        boolean flag = false;
        for(int i = 0; i < size; i++) {
            if (current.item.equals(value)) {
                System.out.println("Element present at index " + i);
                flag = true;
                // break;
            }
            
            current = current.next;

        }
        if (!flag) {
            System.out.println("Element not present in Linked List");
        }

    }

    stack and queus:
    stack:lifo
    queue:fifo

    stack:
    package stack;

public class StackDs {
	private static Object[] stackarray;
	private static int size;
	private int top;
	public StackDs(int size)
	{
		StackDs.size=size;
		this.top=-1;
		stackarray=new Object[size];
	}
	public void push(Object value)
	{
		if(top==size-1 ) {
			System.out.println("Stack is Full");
		}
		else {
		top++;
		stackarray[top]=value;
		}
	}
	public Object pop()
	{
		if(top==-1) {
			System.out.println("Stack is Empty");
			return -1;
		}
		else
		{
			int oldtop=top;
			top--;
			stackarray[oldtop]=null;
			return stackarray[top];
		}
	}
	public Object peek()
	{
		return stackarray[top];
	}
	public static void main(String[] args) {
		StackDs s=new StackDs(7);
		s.push(10);
		s.push(20);
		s.push(30);
		s.push(40);
		s.push(50);
	
		s.pop();
		for(int i=0;i<size;i++)
			System.out.println(stackarray[i]);
	}

}



queues:
-----------
package queue;


public class Queues {
    private static final int MAX_SIZE = 100;
    private int[] queueArray;
    private int front;
    private int rear;
    private int size;

    public Queues() {
        queueArray = new int[MAX_SIZE];
        front = 0;
        rear = -1;
        size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == MAX_SIZE;
    }

    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue.");
            return;
        }
        rear = (rear + 1) % MAX_SIZE;
        queueArray[rear] = item;
        size++;
        System.out.println("Enqueued: " + item);
    }

    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return -1; // or throw an exception
        }
        int item = queueArray[front];
        front = (front + 1) % MAX_SIZE;
        size--;
        System.out.println("Dequeued: " + item);
        return item;
    }

    public static void main(String[] args) {
        Queues queue = new Queues();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);
        queue.dequeue();
   }
}
